q()
aic (36.4, k=2)
library (stats)
aic (36.4, k=2)
AIC (36.4, k=2)
q()
library (dismo)
files <- list.files(path=paste(system.file(package="dismo"),
+ sep=
files <- list.files(path=paste(system.file(package="dismo"), '/ex', sep=''), pattern='grd', full.names=TRUE )
files
mask <- raster(files[1])
set.seed(1963)
bg <- randomPoints(mask, 500 )
par(mfrow=c(1,2))
plot(!is.na(mask), legend=FALSE)
points(bg, cex=0.5)
e <- extent(-80, -53, -39, -22)
bg2 <- randomPoints(mask, 50, ext=e)
plot(!is.na(mask), legend=FALSE)
plot(e, add=TRUE, col=
plot(e, add=TRUE, col='red')
points(bg2, cex=0.5)
getwd()
WC30 <- list.files (path="D:/GIS_layers/wordclim/bio_30_bil")
WC30
WC30 <- list.files (path="D:/GIS_layers/wordclim/bio_30_bil", pattern='bil')
WC30
WC30 <- stack (WC30)
WC30 <- list.files (path="D:/GIS_layers/wordclim/bio_30_bil", pattern='bil')
WC30 <- stack (WC30)
WC30 <- list.files (path="D:/GIS_layers/wordclim/bio_30_grd", pattern='grd')
WC30
WC30 <- stack (WC30)
library (raster)
WC30 <- stack (WC30)
WC302 <- stack (WC30)
library (ncdf)
WC30 <- list.files (path="D:/GIS_layers/wordclim/bio_30_ascii", pattern='asc')
WC30
WC302 <- stack (WC30)
WC30 <- list.files (path="D:/GIS_layers/wordclim/bio_30_bil", pattern='bil')
WC30
test <- stack (WC30)
WC30 <- list.files (path="D:/GIS_layers/wordclim/bio_30_grd", pattern='grd')
WC30
test <- stack (WC30)
WC30 <- list.files (path="D:/GIS_layers/wordclim/bio_30_grd", pattern='gri')
WC30
test <- stack (WC30)
WC30 <- list.files (path="D:/GIS_layers/wordclim/bio_30_grd", pattern='grd',full.names=TRUE )
WC30
test <- stack ("D:/GIS_layers/wordclim/bio_30_bil/bio_1.bil", "D:/GIS_layers/wordclim/bio_30_bil/bio_2.bil")
WC30 <- list.files (path="D:/GIS_layers/wordclim/bio_30_bil", pattern='bil', full.names=TRUE)
WC30
test <- stack (WC30)
test
WC30_stack <- stack (WC30)
names (test)
data(wrld_simpl)
library(maptools)
data(wrld_simpl)
file <- paste(system.file(package="dismo"), "/ex/bradypus.csv", sep="")
bradypus <- read.table(file, header=TRUE, sep=
bradypus <- read.table(file, header=TRUE, sep=',')
bradypus <- bradypus[,-1]
plot(predictors, 1)
predictors <- stack (files)
plot(predictors, 1)
plot(wrld_simpl, add=TRUE)
points(bradypus, col=
points(bradypus, col='blue')
plot(predictors, 1)
plot(wrld_simpl, add=TRUE)
points(bradypus, col='blue')
presvals <- extract(predictors, bradypus)
set.seed(0)
backgr <- randomPoints(predictors, 500)
absvals <- extract(predictors, backgr)
pb <- c(rep(1, nrow(presvals)), rep(0, nrow(absvals)))
pb
sdmdata <- data.frame(cbind(pb, rbind(presvals, absvals)))
sdmdata
head (sdmdata)
summary(sdmdata)
pairs(sdmdata[,2:5], cex=0.1, fig=TRUE)
jar <- paste(system.file(package="dismo"), "/java/maxent.jar", sep=
jar <- paste(system.file(package="dismo"), "/java/maxent.jar", sep='')
if (file.exists(jar)) {
+ xm <- maxent(predictors, pres_train, factors=
+ plot(xm)
+ } else {
+ cat(
+ plot(1)
+ }
predictors
names (predictors)
predictors <- predictors (-biome)
predictors <- predictors [-biome]
sdmdata[,
sdmdata[,
sdmdata[,
sdmdata[,'biome'] = as.factor(sdmdata[,'biome')
xm <- maxent(predictors, pres_train, factors='biome')
pred_nf <- dropLayer(predictors, 'biome')
group <- kfold(bradypus, 5)
pres_train <- bradypus[group != 1, ]
pres_test <- bradypus[group == 1, ]
ext = extent(-90, -32, -33, 23)
backg <- randomPoints(pred_nf, n=1000, ext=ext, extf = 1.25)
colnames(backg) = c(
colnames(backg) = c('lon', 'lat')
group <- kfold(backg, 5)
backg_train <- backg[group != 1, ]
backg_test <- backg[group == 1, ]
r = raster(pred_nf, 1)
plot(!is.na(r), col=c('white', 'light grey') legend=FALSE)
plot(!is.na(r), col=c('white', 'light grey'), legend=FALSE)
plot(ext, add=TRUE, col='red', lwd=2)
points(backg_train, pch=
points(backg_train, pch='-', cex=0.5, col='yellow')
points(backg_test, pch='-', cex=0.5, col='black')
points(pres_train, pch= '+', col='green')
points(pres_test, pch= '+', col='blue')
xm <- maxent(predictors, pres_train, factors='biome')
jar <- paste(system.file(package="dismo"), "/java/maxent.jar", sep=
jar <- paste(system.file(package="dismo"), "/java/maxent.jar", sep='')
if (file.exists(jar)) {
xm <- maxent(predictors, pres_train, factors='biome')
plot(xm)
} else {
cat('cannot run this example because maxent is not available')
plot (1)
}
library (rJava)
utils:::menuInstallPkgs()
library (rJava)
library (rJava)
if (file.exists(jar)) {
+ xm <- maxent(predictors, pres_train, factors='biome')
+ plot(xm)
+ } else {
+ cat('cannot run this example because maxent is not available')
+ plot (1)
xm <- maxent(predictors, pres_train, factors='biome')
system("java -version")
if(Sys.getenv("JAVA_HOME")!=""){
Sys.setenv(JAVA_HOME="")
}
library(rJava)
install.packages('rJava',,'http://www.rforge.net/')
library(rJava)
install.packages('rJava', .libPaths()[1], 'http://www.rforge.net/')
library(rJava)
java -d64 -version
java -d32 -version
library(rJava)
xm <- maxent(predictors, pres_train, factors='biome')
plot (xm)
e <- evaluate(pres_test, backg_test, xm, predictors)
e
px <- predict(predictors, xm, ext=ext, progress=
px <- predict(predictors, xm, ext=ext, progress='')
par(mfrow=c(1,2))
plot(px, main=
plot(px, main='Maxent, raw values')
plot(wrld_simpl, add=TRUE, border=
plot(wrld_simpl, add=TRUE, border='dark grey')
tr <- threshold(e, 'spec_sens')
plot(px > tr, main='presence/absence')
plot(wrld_simpl, add=TRUE, border=
plot(wrld_simpl, add=TRUE, border='dark grey)
plot(wrld_simpl, add=TRUE, border='dark grey')
points(pres_train, pch='+')
maxent (help)
help (maxent)
?Maxent
Maxent?
??Maxent
q()
q()
q()
q()
utils:::menuInstallPkgs()
q()
install.packages ('wallace')
library (wallace)
q()
install.packages ("tess3R)
install.packages ("tess3R")
install.packages ("tess3R")
q()
g <- ggbiplot(PCA, obs.scale = 1, var.scale = 1,
groups = GROUP, ellipse = TRUE,
circle = FALSE)
g <- g + scale_color_manual (values =  c ("blue", "green", "purple"))
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
write.csv (PCA$x, file="./PCA.csv")
# let's do ANOVA
PCA <- read.csv ("PCA.csv")
ANOVA <- cbind (RECORDS,PCA)
fit <- aov(ANOVA$PC1 ~ ANOVA$Group, data=ANOVA)
fit
summary (fit)
TukeyHSD(fit)
setwd ("C:/Users/jezkovt/Dropbox/Workshop_materials/R")
RECORDS <- read.csv ("horned_lizards.csv")
levels (RECORDS$Group)
LONGLAT <- RECORDS [,-3]
#extract bioclimatic variables using the package raster
library (raster)
VARIABLES <-  getData('worldclim', var='bio', res=2.5)
WC30 <- stack (VARIABLES)
CLIMATE <- extract (WC30, LONGLAT)
CLIMATE <- cbind (RECORDS, CLIMATE )
# run PCA
head (CLIMATE, 3)
CLIMATE <- CLIMATE[complete.cases(CLIMATE), ]
CL <- (CLIMATE [, 4:22])
PCA <- prcomp (CL, center=TRUE, scale.=TRUE)
#get PCA values
print (PCA)
plot(PCA, type = "l")
summary (PCA)
GROUP <- (CLIMATE [, 3])
library(devtools)
#install_github("ggbiplot", "vqv")
library(ggbiplot)
library (digest)
g <- ggbiplot(PCA, obs.scale = 1, var.scale = 1,
groups = GROUP, ellipse = TRUE,
circle = FALSE)
g <- g + scale_color_manual (values =  c ("blue", "green", "purple"))
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
write.csv (PCA$x, file="./PCA.csv")
# let's do ANOVA
PCA <- read.csv ("PCA.csv")
ANOVA <- cbind (RECORDS,PCA)
fit <- aov(ANOVA$PC1 ~ ANOVA$Group, data=ANOVA)
fit
summary (fit)
TukeyHSD(fit)
